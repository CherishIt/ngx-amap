{"version":3,"sources":["C:/Users/rainnyxzy/Documents/GitHub/ngx-amap/dist/ngx-amap/ngx-amap.js","C:/Users/rainnyxzy/Documents/GitHub/ngx-amap/src/app/views/shared/shared.module.ts","C:/Users/rainnyxzy/Documents/GitHub/ngx-amap/node_modules/rxjs/_esm5/add/observable/empty.js","C:/Users/rainnyxzy/Documents/GitHub/ngx-amap/node_modules/rxjs/_esm5/add/observable/of.js","C:/Users/rainnyxzy/Documents/GitHub/ngx-amap/node_modules/rxjs/_esm5/observable/empty.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAkJ;AAC7G;AACrC;AACA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,0EAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,0EAAmB;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,eAAe;AACxD,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,wBAAwB;AACxB;AACA,oBAAoB;AACpB,SAAS;AACT,+BAA+B,UAAU,GAAG,YAAY;AACxD;AACA,kBAAkB,QAAQ,GAAG,OAAO;AACpC;AACA;AACA;AACA,KAAK,0EAAmB;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK,gCAAgC,+FAAwC,IAAI;AACjF,KAAK,qBAAqB;AAC1B,KAAK,mBAAmB;AACxB;;AAEA;AACA,mBAAmB;AACnB;AACA,eAAe,EAAE;AACjB,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA,wBAAwB,IAAI;AAC5B;AACA;AACA,eAAe,EAAE;AACjB,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA,0BAA0B,IAAI;AAC9B;AACA;AACA,eAAe,EAAE;AACjB,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA,yBAAyB,IAAI;AAC7B;AACA;AACA,eAAe,EAAE;AACjB,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,0EAAmB;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB;AACnB;AACA,eAAe,EAAE;AACjB,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA,wBAAwB,IAAI;AAC5B;AACA;AACA,eAAe,EAAE;AACjB,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA,0BAA0B,IAAI;AAC9B;AACA;AACA,eAAe,EAAE;AACjB,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA,yBAAyB,IAAI;AAC7B;AACA;AACA,eAAe,EAAE;AACjB,eAAe,KAAK;AACpB,gBAAgB;AAChB;AACA;AACA,wBAAwB,IAAI;AAC5B;AACA;AACA;AACA,KAAK,0EAAmB;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,0EAAmB;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK,6BAA6B;AAClC,KAAK,uBAAuB;AAC5B;;AAEA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,gBAAgB,mBAAmB,qBAAqB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,0EAAmB;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK,uBAAuB;AAC5B;;AAEA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,eAAe,mBAAmB,8BAA8B;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,0EAAmB;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK,uBAAuB;AAC5B;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,mEAAmE,eAAe;AAClF;AACA;AACA,wEAAwE,eAAe;AACvF;AACA;AACA,kFAAkF,eAAe;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,0EAAmB;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK,uBAAuB;AAC5B,KAAK,sBAAsB;AAC3B,KAAK,qBAAqB;AAC1B;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,6DAA6D,gBAAgB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,0EAAmB;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK,uBAAuB;AAC5B,KAAK,sBAAsB;AAC3B;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK,0EAAmB;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK,uBAAuB;AAC5B,KAAK,uBAAuB;AAC5B,KAAK,sBAAsB;AAC3B,KAAK,qBAAqB;AAC1B,KAAK,sBAAsB;AAC3B;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK,0EAAmB;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK,uBAAuB;AAC5B,KAAK,uBAAuB;AAC5B,KAAK,sBAAsB;AAC3B,KAAK,qBAAqB;AAC1B;;AAEA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,0EAAmB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK,0EAAmB;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK,uBAAuB;AAC5B,KAAK,uBAAuB;AAC5B;;AAEA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,EAAE;AACvC;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,0EAAmB;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK,uBAAuB;AAC5B,KAAK,uBAAuB;AAC5B,KAAK,sBAAsB;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK,2EAAoB;AACzB,KAAK,uBAAuB;AAC5B,KAAK,uBAAuB;AAC5B;AACA;AACA,cAAc,qEAAc;AAC5B,gBAAgB,qEAAc;AAC9B,cAAc,qEAAc;AAC5B,gBAAgB,qEAAc;AAC9B,qBAAqB,qEAAc;AACnC,eAAe,qEAAc;AAC7B,cAAc,qEAAc;AAC5B,gBAAgB,qEAAc;AAC9B,aAAa,qEAAc;AAC3B,uBAAuB,qEAAc;AACrC,mBAAmB,qEAAc;AACjC,sBAAsB,qEAAc;AACpC,sBAAsB,qEAAc;AACpC,sBAAsB,qEAAc;AACpC,uBAAuB,qEAAc;AACrC,mBAAmB,qEAAc;AACjC,yBAAyB,qEAAc;AACvC,oBAAoB,qEAAc;AAClC,oBAAoB,qEAAc;AAClC,yBAAyB,qEAAc;AACvC,wBAAwB,qEAAc;AACtC,mBAAmB,qEAAc;AACjC,qBAAqB,qEAAc;AACnC,mBAAmB,qEAAc;AACjC,kBAAkB,qEAAc;AAChC,kBAAkB,qEAAc;AAChC,2BAA2B,qEAAc;AACzC,cAAc,qEAAc;AAC5B,cAAc,qEAAc;AAC5B,eAAe,sEAAe;AAC9B,kBAAkB,sEAAe;AACjC,kBAAkB,sEAAe;AACjC,kBAAkB,sEAAe;AACjC,iBAAiB,sEAAe;AAChC,mBAAmB,sEAAe;AAClC,iBAAiB,sEAAe;AAChC,oBAAoB,sEAAe;AACnC,mBAAmB,sEAAe;AAClC,iBAAiB,sEAAe;AAChC,gBAAgB,sEAAe;AAC/B,oBAAoB,sEAAe;AACnC,mBAAmB,sEAAe;AAClC,mBAAmB,sEAAe;AAClC,oBAAoB,sEAAe;AACnC,kBAAkB,sEAAe;AACjC,iBAAiB,sEAAe;AAChC,mBAAmB,sEAAe;AAClC,oBAAoB,sEAAe;AACnC,mBAAmB,sEAAe;AAClC,kBAAkB,sEAAe;AACjC,sBAAsB,sEAAe;AACrC,qBAAqB,sEAAe;AACpC,oBAAoB,sEAAe;AACnC,mBAAmB,sEAAe;AAClC,kBAAkB,sEAAe;AACjC,iBAAiB,sEAAe;AAChC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK,2EAAoB;AACzB,KAAK,uBAAuB;AAC5B,KAAK,2BAA2B;AAChC,KAAK,qBAAqB;AAC1B;AACA;AACA,kBAAkB,qEAAc;AAChC,kBAAkB,qEAAc;AAChC,2BAA2B,qEAAc;AACzC,cAAc,qEAAc;AAC5B,gBAAgB,qEAAc;AAC9B,kBAAkB,qEAAc;AAChC,oBAAoB,qEAAc;AAClC,gBAAgB,qEAAc;AAC9B,sBAAsB,sEAAe;AACrC,oBAAoB,sEAAe;AACnC,qBAAqB,sEAAe;AACpC,sBAAsB,sEAAe;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA,SAAS;AACT;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK,uBAAuB;AAC5B,KAAK,uBAAuB;AAC5B,KAAK,sBAAsB;AAC3B,KAAK,qBAAqB;AAC1B,KAAK,sBAAsB;AAC3B;AACA;AACA,kBAAkB,qEAAc;AAChC,gBAAgB,qEAAc;AAC9B,cAAc,qEAAc;AAC5B,iBAAiB,qEAAc;AAC/B,sBAAsB,qEAAc;AACpC,gBAAgB,qEAAc;AAC9B,mBAAmB,qEAAc;AACjC,qBAAqB,qEAAc;AACnC,gBAAgB,qEAAc;AAC9B,iBAAiB,qEAAc;AAC/B,gBAAgB,qEAAc;AAC9B,eAAe,qEAAc;AAC7B,sBAAsB,qEAAc;AACpC,gBAAgB,qEAAc;AAC9B,eAAe,qEAAc;AAC7B,mBAAmB,qEAAc;AACjC,eAAe,qEAAc;AAC7B,iBAAiB,qEAAc;AAC/B,eAAe,qEAAc;AAC7B,eAAe,qEAAc;AAC7B,mBAAmB,qEAAc;AACjC,gBAAgB,qEAAc;AAC9B,wBAAwB,qEAAc;AACtC,eAAe,sEAAe;AAC9B,qBAAqB,sEAAe;AACpC,kBAAkB,sEAAe;AACjC,oBAAoB,sEAAe;AACnC,mBAAmB,sEAAe;AAClC,mBAAmB,sEAAe;AAClC,kBAAkB,sEAAe;AACjC,mBAAmB,sEAAe;AAClC,iBAAiB,sEAAe;AAChC,mBAAmB,sEAAe;AAClC,kBAAkB,sEAAe;AACjC,iBAAiB,sEAAe;AAChC,oBAAoB,sEAAe;AACnC,mBAAmB,sEAAe;AAClC,kBAAkB,sEAAe;AACjC,gBAAgB,sEAAe;AAC/B,iBAAiB,sEAAe;AAChC,mBAAmB,sEAAe;AAClC,6BAA6B,iHAA0D;AACvF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK,uBAAuB;AAC5B,KAAK,yBAAyB;AAC9B;AACA;AACA,gBAAgB,qEAAc;AAC9B,gBAAgB,qEAAc;AAC9B,kBAAkB,qEAAc;AAChC,mBAAmB,qEAAc;AACjC,sBAAsB,qEAAc;AACpC,sBAAsB,qEAAc;AACpC,cAAc,qEAAc;AAC5B,qBAAqB,qEAAc;AACnC,uBAAuB,qEAAc;AACrC,sBAAsB,qEAAc;AACpC,qBAAqB,qEAAc;AACnC,yBAAyB,qEAAc;AACvC,kBAAkB,qEAAc;AAChC,iBAAiB,qEAAc;AAC/B,iBAAiB,qEAAc;AAC/B,iBAAiB,qEAAc;AAC/B,gBAAgB,qEAAc;AAC9B,uBAAuB,sEAAe;AACtC,eAAe,sEAAe;AAC9B,kBAAkB,sEAAe;AACjC,oBAAoB,sEAAe;AACnC,sBAAsB,sEAAe;AACrC,sBAAsB,sEAAe;AACrC,mBAAmB,sEAAe;AAClC,iBAAiB,sEAAe;AAChC,mBAAmB,sEAAe;AAClC,kBAAkB,sEAAe;AACjC,gBAAgB,sEAAe;AAC/B,oBAAoB,sEAAe;AACnC,mBAAmB,sEAAe;AAClC,kBAAkB,sEAAe;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;AACA,KAAK,uBAAuB;AAC5B,KAAK,wBAAwB;AAC7B,KAAK,sBAAsB;AAC3B;AACA;AACA,gBAAgB,qEAAc;AAC9B,kBAAkB,qEAAc;AAChC,eAAe,qEAAc;AAC7B,oBAAoB,qEAAc;AAClC,gBAAgB,qEAAc;AAC9B,mBAAmB,qEAAc;AACjC,mBAAmB,qEAAc;AACjC,sBAAsB,qEAAc;AACpC,wBAAwB,qEAAc;AACtC,mBAAmB,qEAAc;AACjC,gBAAgB,qEAAc;AAC9B,qBAAqB,sEAAe;AACpC,kBAAkB,sEAAe;AACjC,eAAe,sEAAe;AAC9B,qBAAqB,sEAAe;AACpC,qBAAqB,sEAAe;AACpC;;AAEA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,wDAAwD;AACzE,iBAAiB,kGAAkG;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEQ;AACR;;;;;;;;;;;;;;;;;;;;;ACpqEyC;AACM;AACC;AACF;AACL;AAoBzC;IAAA;IAA4B,CAAC;IAAhB,YAAY;QAlBxB,uEAAQ,CAAC;YACR,OAAO,EAAE;gBACP,qEAAY;gBACZ,+DAAa,CAAC,OAAO,CAAC;oBACpB,MAAM,EAAE,kCAAkC;oBAC1C,OAAO,EAAE,8BAA8B;oBACvC,KAAK,EAAE,KAAK;iBACb,CAAC;gBACF,sEAAU,CAAC,OAAO,EAAE;gBACpB,oEAAc,CAAC,OAAO,EAAE;aACzB;YACD,OAAO,EAAE;gBACP,+DAAa;gBACb,sEAAU;gBACV,oEAAc;aACf;YACD,YAAY,EAAE,EAAE;SACjB,CAAC;OACW,YAAY,CAAI;IAAD,mBAAC;CAAA;AAAJ;;;;;;;;;;ACxBzB;AAAA;AACqB;AACU;AAC/B;AACA;;;;;;;;;;ACJA;AAAA;AACqB;AACI;AACzB;AACA;;;;;;;;;;ACJA;AAAA;AAC0B;AAC1B;AACA","file":"common.chunk.js","sourcesContent":["import { Component, ContentChildren, Directive, ElementRef, EventEmitter, Inject, Injectable, InjectionToken, Input, NgModule, Output, QueryList } from '@angular/core';\nimport { Observable as Observable$1 } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/observable/empty';\n\nclass WindowRef {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getNativeWindow() {\r\n        return window;\r\n    }\r\n}\r\nWindowRef.decorators = [\r\n    { type: Injectable },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nWindowRef.ctorParameters = () => [];\r\nclass DocumentRef {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getNativeDocument() {\r\n        return document;\r\n    }\r\n}\r\nDocumentRef.decorators = [\r\n    { type: Injectable },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nDocumentRef.ctorParameters = () => [];\n\nconst MAP_API_CONFIG = new InjectionToken('ngx-amap MAP_API_CONFIG');\r\nclass MapAPILoaderService {\r\n    /**\r\n     * @param {?} config\r\n     * @param {?} d\r\n     * @param {?} w\r\n     */\r\n    constructor(config, d, w) {\r\n        this._config = config || {};\r\n        this._windowRef = w;\r\n        this._documentRef = d;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    load() {\r\n        if (this._mapLoaded) {\r\n            return this._mapLoaded;\r\n        }\r\n        const /** @type {?} */ callbackName = `ngxAMapAPILoader`;\r\n        const /** @type {?} */ script = this._documentRef.getNativeDocument().createElement('script');\r\n        script.type = 'text/javascript';\r\n        script.async = true;\r\n        script.defer = true;\r\n        script.src = this.getSrcFromConfig(callbackName);\r\n        this._mapLoaded = new Promise((resolve, reject) => {\r\n            ((this._windowRef.getNativeWindow()))[callbackName] = () => {\r\n                resolve();\r\n            };\r\n            script.onerror = (error) => { reject(error); };\r\n        });\r\n        this._documentRef.getNativeDocument().body.appendChild(script);\r\n        return this._mapLoaded;\r\n    }\r\n    /**\r\n     * @param {?} callbackName\r\n     * @return {?}\r\n     */\r\n    getSrcFromConfig(callbackName) {\r\n        const /** @type {?} */ urlBase = this._config.urlPath || 'http://webapi.amap.com/maps';\r\n        const /** @type {?} */ queryParams = {\r\n            v: this._config.apiVersion || '1.4.1',\r\n            callback: callbackName,\r\n            key: this._config.apiKey\r\n        };\r\n        const /** @type {?} */ params = Object.keys(queryParams)\r\n            .filter((k) => queryParams[k] != null)\r\n            .filter((k) => {\r\n            // remove empty arrays\r\n            return !Array.isArray(queryParams[k]) ||\r\n                (Array.isArray(queryParams[k]) && queryParams[k].length > 0);\r\n        })\r\n            .map((k) => {\r\n            // join arrays as comma seperated strings\r\n            const /** @type {?} */ i = queryParams[k];\r\n            if (Array.isArray(i)) {\r\n                return { key: k, value: i.join(',') };\r\n            }\r\n            return { key: k, value: queryParams[k] };\r\n        })\r\n            .map((entry) => `${entry.key}=${entry.value}`)\r\n            .join('&');\r\n        return `${urlBase}?${params}`;\r\n    }\r\n}\r\nMapAPILoaderService.decorators = [\r\n    { type: Injectable },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nMapAPILoaderService.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [MAP_API_CONFIG,] },] },\r\n    { type: DocumentRef, },\r\n    { type: WindowRef, },\r\n];\n\nclass LoggerService {\r\n    constructor() { }\r\n    /**\r\n     * @param {?} tag\r\n     * @param {...?} args\r\n     * @return {?}\r\n     */\r\n    i(tag, ...args) {\r\n        console.log(`[${tag}]`, ...args);\r\n    }\r\n    /**\r\n     * @param {?} tag\r\n     * @param {...?} args\r\n     * @return {?}\r\n     */\r\n    e(tag, ...args) {\r\n        console.error(`[${tag}]`, ...args);\r\n    }\r\n    /**\r\n     * @param {?} tag\r\n     * @param {...?} args\r\n     * @return {?}\r\n     */\r\n    w(tag, ...args) {\r\n        console.warn(`[${tag}]`, ...args);\r\n    }\r\n    /**\r\n     * @param {?} tag\r\n     * @param {...?} args\r\n     * @return {?}\r\n     */\r\n    d(tag, ...args) {\r\n        // only stub;\r\n    }\r\n}\r\nLoggerService.decorators = [\r\n    { type: Injectable },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nLoggerService.ctorParameters = () => [];\n\nclass DebugLoggerService {\r\n    constructor() { }\r\n    /**\r\n     * @param {?} tag\r\n     * @param {...?} args\r\n     * @return {?}\r\n     */\r\n    i(tag, ...args) {\r\n        console.log(`[${tag}]`, ...args);\r\n    }\r\n    /**\r\n     * @param {?} tag\r\n     * @param {...?} args\r\n     * @return {?}\r\n     */\r\n    e(tag, ...args) {\r\n        console.error(`[${tag}]`, ...args);\r\n    }\r\n    /**\r\n     * @param {?} tag\r\n     * @param {...?} args\r\n     * @return {?}\r\n     */\r\n    w(tag, ...args) {\r\n        console.warn(`[${tag}]`, ...args);\r\n    }\r\n    /**\r\n     * @param {?} tag\r\n     * @param {...?} args\r\n     * @return {?}\r\n     */\r\n    d(tag, ...args) {\r\n        console.log(`[${tag}]`, ...args);\r\n    }\r\n}\r\nDebugLoggerService.decorators = [\r\n    { type: Injectable },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nDebugLoggerService.ctorParameters = () => [];\n\nclass EventBinder {\r\n    /**\r\n     * @template T\r\n     * @param {?} target\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    bindEvent(target, event) {\r\n        return Observable$1.create(observer => {\r\n            let /** @type {?} */ listenerPromise = target.then(m => {\r\n                return AMap.event.addListener(m, event, e => {\r\n                    setTimeout(() => observer.next(e));\r\n                }, this);\r\n            });\r\n            return () => {\r\n                listenerPromise.then(listener => {\r\n                    AMap.event.removeListener(listener);\r\n                    listenerPromise = null;\r\n                });\r\n            };\r\n        });\r\n    }\r\n}\n\nclass MapAPIService extends EventBinder {\r\n    /**\r\n     * @param {?} loader\r\n     * @param {?} logger\r\n     */\r\n    constructor(loader, logger) {\r\n        super();\r\n        this.loader = loader;\r\n        this.logger = logger;\r\n        this.TAG = 'map-api';\r\n        this._mapPromise = new Promise(resolve => this._mapResolver = resolve);\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    createMap(el, options) {\r\n        return this.loader.load().then(() => {\r\n            this._map = new AMap.Map(el, options);\r\n            this._mapResolver(this._map);\r\n            this.logger.d(this.TAG, 'new map created');\r\n            return this._map;\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroyMap() {\r\n        this._mapPromise.then(map => {\r\n            map.clearMap();\r\n            map.destroy();\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get map() {\r\n        return this._mapPromise;\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    bindMapEvents(event) {\r\n        return this.bindEvent(this._mapPromise, event);\r\n    }\r\n}\r\nMapAPIService.decorators = [\r\n    { type: Injectable },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nMapAPIService.ctorParameters = () => [\r\n    { type: MapAPILoaderService, },\r\n    { type: LoggerService, },\r\n];\n\nclass PixelService {\r\n    /**\r\n     * @param {?} logger\r\n     */\r\n    constructor(logger) {\r\n        this.logger = logger;\r\n        this.TAG = 'pixel-service';\r\n    }\r\n    /**\r\n     * @param {?} options\r\n     * @param {?=} name\r\n     * @return {?}\r\n     */\r\n    create(options, name) {\r\n        if (this.verify(options, name)) {\r\n            return new AMap.Pixel(options.x, options.y);\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} pixel\r\n     * @param {?=} name\r\n     * @return {?}\r\n     */\r\n    verify(pixel, name) {\r\n        if (typeof pixel.x !== 'number' || typeof pixel.y !== 'number') {\r\n            this.logger.e(`${name || 'pixel'} should have type {x: number, y: number}`);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\nPixelService.decorators = [\r\n    { type: Injectable },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nPixelService.ctorParameters = () => [\r\n    { type: LoggerService, },\r\n];\n\nclass SizeService {\r\n    /**\r\n     * @param {?} logger\r\n     */\r\n    constructor(logger) {\r\n        this.logger = logger;\r\n        this.TAG = 'size-service';\r\n    }\r\n    /**\r\n     * @param {?} options\r\n     * @param {?=} name\r\n     * @return {?}\r\n     */\r\n    create(options, name) {\r\n        if (this.verify(options, name)) {\r\n            return new AMap.Size(options.width, options.height);\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} size\r\n     * @param {?=} name\r\n     * @return {?}\r\n     */\r\n    verify(size, name) {\r\n        if (typeof size.width !== 'number' || typeof size.height !== 'number') {\r\n            this.logger.e(`${name || 'size'} should have type {width: number, height: number}`);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\nSizeService.decorators = [\r\n    { type: Injectable },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nSizeService.ctorParameters = () => [\r\n    { type: LoggerService, },\r\n];\n\nclass IconService {\r\n    /**\r\n     * @param {?} logger\r\n     * @param {?} pixel\r\n     * @param {?} size\r\n     */\r\n    constructor(logger, pixel, size) {\r\n        this.logger = logger;\r\n        this.pixel = pixel;\r\n        this.size = size;\r\n        this.TAG = 'icon-service';\r\n    }\r\n    /**\r\n     * @param {?} options\r\n     * @param {?=} name\r\n     * @return {?}\r\n     */\r\n    create(options, name) {\r\n        if (typeof options === 'string') {\r\n            return options;\r\n        }\r\n        if (!options) {\r\n            return undefined;\r\n        }\r\n        if (!((options)).size) {\r\n            return (options);\r\n        }\r\n        let /** @type {?} */ iconOption = (options);\r\n        if (iconOption.size) {\r\n            iconOption.size = this.size.create(iconOption.size, `${name || 'icon'}.size`);\r\n        }\r\n        if (iconOption.imageSize) {\r\n            iconOption.imageSize = this.size.create(iconOption.size, `${name || 'icon'}.imageSize`);\r\n        }\r\n        if (iconOption.imageOffset) {\r\n            iconOption.imageOffset = this.pixel.create(iconOption.imageOffset, `${name || 'icon'}.imageOffset`);\r\n        }\r\n        if (!iconOption.size) {\r\n            delete iconOption.size;\r\n        }\r\n        if (!iconOption.imageSize) {\r\n            delete iconOption.imageSize;\r\n        }\r\n        if (!iconOption.imageOffset) {\r\n            delete iconOption.imageOffset;\r\n        }\r\n        return new AMap.Icon(iconOption);\r\n    }\r\n}\r\nIconService.decorators = [\r\n    { type: Injectable },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nIconService.ctorParameters = () => [\r\n    { type: LoggerService, },\r\n    { type: PixelService, },\r\n    { type: SizeService, },\r\n];\n\nclass LabelService {\r\n    /**\r\n     * @param {?} logger\r\n     * @param {?} pixel\r\n     */\r\n    constructor(logger, pixel) {\r\n        this.logger = logger;\r\n        this.pixel = pixel;\r\n        this.TAG = 'label-service';\r\n    }\r\n    /**\r\n     * @param {?} options\r\n     * @param {?=} name\r\n     * @return {?}\r\n     */\r\n    create(options, name) {\r\n        if (options) {\r\n            return {\r\n                content: options.content,\r\n                offset: this.pixel.create(options.offset, `${name || 'label'}.offset`)\r\n            };\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n}\r\nLabelService.decorators = [\r\n    { type: Injectable },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nLabelService.ctorParameters = () => [\r\n    { type: LoggerService, },\r\n    { type: PixelService, },\r\n];\n\nclass MarkerService extends EventBinder {\r\n    /**\r\n     * @param {?} map\r\n     * @param {?} logger\r\n     * @param {?} pixel\r\n     * @param {?} icon\r\n     * @param {?} label\r\n     */\r\n    constructor(map, logger, pixel, icon, label) {\r\n        super();\r\n        this.map = map;\r\n        this.logger = logger;\r\n        this.pixel = pixel;\r\n        this.icon = icon;\r\n        this.label = label;\r\n        this.TAG = 'marker-service';\r\n        this._map = map.map;\r\n    }\r\n    /**\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    create(options) {\r\n        return this._map.then(map => {\r\n            if (options.offset) {\r\n                options.offset = this.pixel.create(options.offset, 'offset');\r\n            }\r\n            if (options.icon) {\r\n                options.icon = this.icon.create(options.icon);\r\n            }\r\n            if (options.shadow) {\r\n                options.shadow = (this.icon.create(options.shadow, 'shadow'));\r\n            }\r\n            if (options.label) {\r\n                options.label = this.label.create(options.label);\r\n            }\r\n            if (!options.offset) {\r\n                delete options.offset;\r\n            }\r\n            if (!options.icon) {\r\n                delete options.icon;\r\n            }\r\n            if (!options.shadow) {\r\n                delete options.shadow;\r\n            }\r\n            if (!options.label) {\r\n                delete options.label;\r\n            }\r\n            options.map = map;\r\n            return new AMap.Marker(options);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} marker\r\n     * @return {?}\r\n     */\r\n    destroy(marker) {\r\n        return marker.then(m => {\r\n            m.setMap(null);\r\n        });\r\n    }\r\n}\r\nMarkerService.decorators = [\r\n    { type: Injectable },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nMarkerService.ctorParameters = () => [\r\n    { type: MapAPIService, },\r\n    { type: LoggerService, },\r\n    { type: PixelService, },\r\n    { type: IconService, },\r\n    { type: LabelService, },\r\n];\n\nclass InfoWindowService extends EventBinder {\r\n    /**\r\n     * @param {?} map\r\n     * @param {?} logger\r\n     * @param {?} pixel\r\n     * @param {?} size\r\n     */\r\n    constructor(map, logger, pixel, size) {\r\n        super();\r\n        this.map = map;\r\n        this.logger = logger;\r\n        this.pixel = pixel;\r\n        this.size = size;\r\n        this.TAG = 'info-window-service';\r\n        this._map = map.map;\r\n    }\r\n    /**\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    create(options) {\r\n        return this._map.then(map => {\r\n            if (options.offset) {\r\n                options.offset = this.pixel.create(options.offset, 'offset');\r\n            }\r\n            if (options.size) {\r\n                options.size = this.size.create(options.size, 'size');\r\n            }\r\n            return new AMap.InfoWindow(options);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} infoWindow\r\n     * @return {?}\r\n     */\r\n    destroy(infoWindow) {\r\n        return infoWindow.then(w => {\r\n            w.close();\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} infoWindow\r\n     * @param {?=} position\r\n     * @return {?}\r\n     */\r\n    open(infoWindow, position) {\r\n        return this._map.then(map => {\r\n            infoWindow.open(map, position);\r\n        });\r\n    }\r\n}\r\nInfoWindowService.decorators = [\r\n    { type: Injectable },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nInfoWindowService.ctorParameters = () => [\r\n    { type: MapAPIService, },\r\n    { type: LoggerService, },\r\n    { type: PixelService, },\r\n    { type: SizeService, },\r\n];\n\nclass Utils {\r\n    /**\r\n     * @template T\r\n     * @param {?} component\r\n     * @param {?} keys\r\n     * @return {?}\r\n     */\r\n    static getOptionsFor(component, keys) {\r\n        const /** @type {?} */ options = {};\r\n        keys.forEach(key => {\r\n            if (component[key] !== undefined && component[key] !== null) {\r\n                options[key] = component[key];\r\n            }\r\n        });\r\n        return options;\r\n    }\r\n}\n\nclass ChangeFilter {\r\n    /**\r\n     * @param {?} _changes\r\n     */\r\n    constructor(_changes) {\r\n        this._changes = _changes;\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    static of(changes) {\r\n        return new ChangeFilter(changes);\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} key\r\n     * @return {?}\r\n     */\r\n    notEmpty(key) {\r\n        if (this._changes[key]) {\r\n            let /** @type {?} */ value = this._changes[key].currentValue;\r\n            if (value !== undefined && value !== null) {\r\n                return Observable$1.of(value);\r\n            }\r\n        }\r\n        return Observable$1.empty();\r\n    }\r\n    /**\r\n     * @template T\r\n     * @param {?} key\r\n     * @return {?}\r\n     */\r\n    has(key) {\r\n        if (this._changes[key]) {\r\n            let /** @type {?} */ value = this._changes[key].currentValue;\r\n            return Observable$1.of(value);\r\n        }\r\n        return Observable$1.empty();\r\n    }\r\n}\r\nChangeFilter.decorators = [\r\n    { type: Injectable },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nChangeFilter.ctorParameters = () => [\r\n    null,\r\n];\n\nclass PolylineService extends EventBinder {\r\n    /**\r\n     * @param {?} map\r\n     * @param {?} logger\r\n     */\r\n    constructor(map, logger) {\r\n        super();\r\n        this.map = map;\r\n        this.logger = logger;\r\n        this.TAG = 'polyline-service';\r\n        this._map = map.map;\r\n    }\r\n    /**\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    create(options) {\r\n        return this._map.then(map => {\r\n            options.map = map;\r\n            return new AMap.Polyline(options);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} polyline\r\n     * @return {?}\r\n     */\r\n    destroy(polyline) {\r\n        return polyline.then(m => {\r\n            m.setMap(null);\r\n        });\r\n    }\r\n}\r\nPolylineService.decorators = [\r\n    { type: Injectable },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nPolylineService.ctorParameters = () => [\r\n    { type: MapAPIService, },\r\n    { type: LoggerService, },\r\n];\n\nclass ToolBarService extends EventBinder {\r\n    /**\r\n     * @param {?} map\r\n     * @param {?} logger\r\n     * @param {?} pixels\r\n     */\r\n    constructor(map, logger, pixels) {\r\n        super();\r\n        this.map = map;\r\n        this.logger = logger;\r\n        this.pixels = pixels;\r\n        this.TAG = 'tool-bar-service';\r\n        this._map = map.map;\r\n    }\r\n    /**\r\n     * @param {?} options\r\n     * @return {?}\r\n     */\r\n    create(options) {\r\n        return new Promise(resolve => {\r\n            this._map.then(map => {\r\n                map.plugin('AMap.ToolBar', () => {\r\n                    if (options.offset) {\r\n                        options.offset = this.pixels.create(options.offset, 'offset');\r\n                    }\r\n                    if (!options.offset) {\r\n                        delete options.offset;\r\n                    }\r\n                    const /** @type {?} */ toolbar = new AMap.ToolBar(options);\r\n                    map.addControl(toolbar);\r\n                    resolve(toolbar);\r\n                });\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} toolbar\r\n     * @return {?}\r\n     */\r\n    destroy(toolbar) {\r\n        return this._map.then(map => toolbar.then(t => map.removeControl(t)));\r\n    }\r\n}\r\nToolBarService.decorators = [\r\n    { type: Injectable },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nToolBarService.ctorParameters = () => [\r\n    { type: MapAPIService, },\r\n    { type: LoggerService, },\r\n    { type: PixelService, },\r\n];\n\nconst ALL_OPTIONS = [\r\n    'view',\r\n    'layers',\r\n    'zoom',\r\n    'center',\r\n    'labelzIndex',\r\n    'zooms',\r\n    'lang',\r\n    'cursor',\r\n    'crs',\r\n    'animateEnable',\r\n    'isHotspot',\r\n    'defaultLayer',\r\n    'rotateEnable',\r\n    'resizeEnable',\r\n    'showIndoorMap',\r\n    'indoorMap',\r\n    'expandZoomRange',\r\n    'dragEnable',\r\n    'zoomEnable',\r\n    'doubleClickZoom',\r\n    'keyboardEnable',\r\n    'jogEnable',\r\n    'scrollWheel',\r\n    'touchZoom',\r\n    'mapStyle',\r\n    'features',\r\n    'showBuildingBlock'\r\n];\r\nclass NgxAmapComponent {\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} api\r\n     * @param {?} logger\r\n     */\r\n    constructor(el, api, logger) {\r\n        this.el = el;\r\n        this.api = api;\r\n        this.logger = logger;\r\n        this.TAG = 'ngx-amap';\r\n        // ngx-amap events:\r\n        this.ready = new EventEmitter();\r\n        this.mapClick = new EventEmitter();\r\n        this.dblClick = new EventEmitter();\r\n        this.complete = new EventEmitter();\r\n        this.mapmove = new EventEmitter();\r\n        this.movestart = new EventEmitter();\r\n        this.moveend = new EventEmitter();\r\n        this.zoomchange = new EventEmitter();\r\n        this.zoomstart = new EventEmitter();\r\n        this.zoomend = new EventEmitter();\r\n        this.resize = new EventEmitter();\r\n        this.rightClick = new EventEmitter();\r\n        this.mouseMove = new EventEmitter();\r\n        this.mouseOver = new EventEmitter();\r\n        this.mouseWheel = new EventEmitter();\r\n        this.mouseOut = new EventEmitter();\r\n        this.mouseUp = new EventEmitter();\r\n        this.mouseDown = new EventEmitter();\r\n        this.touchStart = new EventEmitter();\r\n        this.touchMove = new EventEmitter();\r\n        this.touchEnd = new EventEmitter();\r\n        this.hotspotClick = new EventEmitter();\r\n        this.hotspotOver = new EventEmitter();\r\n        this.hotspotOut = new EventEmitter();\r\n        this.dragStart = new EventEmitter();\r\n        this.dragging = new EventEmitter();\r\n        this.dragEnd = new EventEmitter();\r\n        this._inited = false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this.logger.d(this.TAG, 'map api initializing...');\r\n        const /** @type {?} */ container = this.el.nativeElement.querySelector('div.ngx-amap-container-inner');\r\n        const /** @type {?} */ options = Utils.getOptionsFor(this, ALL_OPTIONS);\r\n        this.logger.d(this.TAG, 'map options:', options);\r\n        this.api.createMap(container, options)\r\n            .then(map => this.ready.emit(map))\r\n            .then(() => this.logger.d(this.TAG, 'map is ready.'))\r\n            .catch(() => this.logger.e(this.TAG, 'failed to load AMap script.'));\r\n        this.bindEvents();\r\n        this._inited = true;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._subscriptions.unsubscribe();\r\n        this.api.destroyMap();\r\n        this.logger.d(this.TAG, 'map api destroyed.');\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        const /** @type {?} */ filter = ChangeFilter.of(changes);\r\n        if (this._inited) {\r\n            filter.has('zoom').subscribe(v => this.setZoom(v));\r\n            filter.has('center').subscribe(v => this.setCenter(v));\r\n        }\r\n        // Not included in OPTIONS\r\n        filter.has('city').subscribe(v => this.setCity(v));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    bindEvents() {\r\n        this._subscriptions = this.api.bindMapEvents('complete').subscribe(e => this.complete.emit(e));\r\n        this._subscriptions.add(this.api.bindMapEvents('mapmove').subscribe(e => this.mapmove.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('movestart').subscribe(e => this.movestart.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('moveend').subscribe(e => this.moveend.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('zoomchange').subscribe(e => this.zoomchange.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('zoomstart').subscribe(e => this.zoomstart.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('zoomend').subscribe(e => this.zoomend.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('resize').subscribe(e => this.resize.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('click').subscribe(e => this.mapClick.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('dblclick').subscribe(e => this.dblClick.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('rightclick').subscribe(e => this.rightClick.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('mousemove').subscribe(e => this.mouseMove.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('mouseover').subscribe(e => this.mouseOver.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('mousewheel').subscribe(e => this.mouseWheel.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('mouseup').subscribe(e => this.mouseUp.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('mouseout').subscribe(e => this.mouseOut.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('mousedown').subscribe(e => this.mouseDown.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('touchstart').subscribe(e => this.touchStart.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('touchmove').subscribe(e => this.touchMove.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('touchend').subscribe(e => this.touchEnd.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('hotspotclick').subscribe(e => this.hotspotClick.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('hotspotover').subscribe(e => this.hotspotOver.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('hotspotout').subscribe(e => this.hotspotOut.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('dragstart').subscribe(e => this.dragStart.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('dragging').subscribe(e => this.dragging.emit(e)));\r\n        this._subscriptions.add(this.api.bindMapEvents('dragend').subscribe(e => this.dragEnd.emit(e)));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    setFitView() {\r\n        return this.api.map.then(map => map.setFitView());\r\n    }\r\n    /**\r\n     * @param {?} level\r\n     * @return {?}\r\n     */\r\n    setZoom(level) {\r\n        return this.api.map.then(map => map.setZoom(level));\r\n    }\r\n    /**\r\n     * @param {?} position\r\n     * @return {?}\r\n     */\r\n    setCenter(position) {\r\n        return this.api.map.then(map => map.setCenter(position));\r\n    }\r\n    /**\r\n     * @param {?} zoomLevel\r\n     * @param {?} center\r\n     * @return {?}\r\n     */\r\n    setZoomAndCenter(zoomLevel, center) {\r\n        return this.api.map.then(map => map.setZoomAndCenter(zoomLevel, center));\r\n    }\r\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    setlabelzIndex(index) {\r\n        return this.api.map.then(map => map.setlabelzIndex(index));\r\n    }\r\n    /**\r\n     * @param {?} city\r\n     * @return {?}\r\n     */\r\n    setCity(city) {\r\n        return this.api.map.then(map => new Promise(resolve => map.setCity(city, resolve)));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    clearMap() {\r\n        return this.api.map.then(map => map.clearMap());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getZoom() {\r\n        return this.api.map.then(map => map.getZoom());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getCenter() {\r\n        return this.api.map.then(map => map.getCenter());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getCity() {\r\n        return this.api.map.then(map => new Promise(resolve => map.getCity(resolve)));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getSize() {\r\n        return this.api.map.then(map => map.getSize());\r\n    }\r\n}\r\nNgxAmapComponent.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'ngx-amap',\r\n                template: `\n    <div class='ngx-amap-container-inner'></div>\n    <div class='ngx-amap-content'>\n      <ng-content></ng-content>\n    </div>\n  `,\r\n                styles: [`\n    .ngx-amap-container-inner {\n      width: inherit;\n      height: inherit; }\n\n    .ngx-amap-content {\n      display: none; }\n  `],\r\n                providers: [\r\n                    MapAPIService,\r\n                    MarkerService,\r\n                    InfoWindowService,\r\n                    PolylineService,\r\n                    ToolBarService\r\n                ]\r\n            },] },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nNgxAmapComponent.ctorParameters = () => [\r\n    { type: ElementRef, },\r\n    { type: MapAPIService, },\r\n    { type: LoggerService, },\r\n];\r\nNgxAmapComponent.propDecorators = {\r\n    'view': [{ type: Input },],\r\n    'layers': [{ type: Input },],\r\n    'zoom': [{ type: Input },],\r\n    'center': [{ type: Input },],\r\n    'labelzIndex': [{ type: Input },],\r\n    'zooms': [{ type: Input },],\r\n    'lang': [{ type: Input },],\r\n    'cursor': [{ type: Input },],\r\n    'crs': [{ type: Input },],\r\n    'animateEnable': [{ type: Input },],\r\n    'isHotspot': [{ type: Input },],\r\n    'defaultLayer': [{ type: Input },],\r\n    'rotateEnable': [{ type: Input },],\r\n    'resizeEnable': [{ type: Input },],\r\n    'showIndoorMap': [{ type: Input },],\r\n    'indoorMap': [{ type: Input },],\r\n    'expandZoomRange': [{ type: Input },],\r\n    'dragEnable': [{ type: Input },],\r\n    'zoomEnable': [{ type: Input },],\r\n    'doubleClickZoom': [{ type: Input },],\r\n    'keyboardEnable': [{ type: Input },],\r\n    'jogEnable': [{ type: Input },],\r\n    'scrollWheel': [{ type: Input },],\r\n    'touchZoom': [{ type: Input },],\r\n    'mapStyle': [{ type: Input },],\r\n    'features': [{ type: Input },],\r\n    'showBuildingBlock': [{ type: Input },],\r\n    'city': [{ type: Input },],\r\n    'name': [{ type: Input },],\r\n    'ready': [{ type: Output },],\r\n    'mapClick': [{ type: Output },],\r\n    'dblClick': [{ type: Output },],\r\n    'complete': [{ type: Output },],\r\n    'mapmove': [{ type: Output },],\r\n    'movestart': [{ type: Output },],\r\n    'moveend': [{ type: Output },],\r\n    'zoomchange': [{ type: Output },],\r\n    'zoomstart': [{ type: Output },],\r\n    'zoomend': [{ type: Output },],\r\n    'resize': [{ type: Output },],\r\n    'rightClick': [{ type: Output },],\r\n    'mouseMove': [{ type: Output },],\r\n    'mouseOver': [{ type: Output },],\r\n    'mouseWheel': [{ type: Output },],\r\n    'mouseOut': [{ type: Output },],\r\n    'mouseUp': [{ type: Output },],\r\n    'mouseDown': [{ type: Output },],\r\n    'touchStart': [{ type: Output },],\r\n    'touchMove': [{ type: Output },],\r\n    'touchEnd': [{ type: Output },],\r\n    'hotspotClick': [{ type: Output },],\r\n    'hotspotOver': [{ type: Output },],\r\n    'hotspotOut': [{ type: Output },],\r\n    'dragStart': [{ type: Output },],\r\n    'dragging': [{ type: Output },],\r\n    'dragEnd': [{ type: Output },],\r\n};\n\nconst ALL_OPTIONS$2 = [\r\n    'isCustom',\r\n    'autoMove',\r\n    'closeWhenClickMap',\r\n    'content',\r\n    'size',\r\n    'offset',\r\n    'position',\r\n    'showShadow'\r\n];\r\nclass AmapInfoWindowComponent {\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} logger\r\n     * @param {?} infoWindows\r\n     * @param {?} sizes\r\n     */\r\n    constructor(el, logger, infoWindows, sizes) {\r\n        this.el = el;\r\n        this.logger = logger;\r\n        this.infoWindows = infoWindows;\r\n        this.sizes = sizes;\r\n        this.TAG = 'amap-info-window';\r\n        // Extra property:\r\n        this.isOpen = false;\r\n        // amap-info-window events:\r\n        this.isOpenChange = new EventEmitter();\r\n        this.windowOpen = new EventEmitter();\r\n        this.windowClose = new EventEmitter();\r\n        this.windowChange = new EventEmitter();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this.content = this.el.nativeElement.querySelector('.amap-info-window-content');\r\n        const /** @type {?} */ options = Utils.getOptionsFor(this, ALL_OPTIONS$2);\r\n        this.logger.d(this.TAG, 'info window options:', options);\r\n        this._infoWindow = this.infoWindows.create(options);\r\n        this.bindEvents();\r\n        this.toggleOpen();\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if (!this._infoWindow) {\r\n            return;\r\n        }\r\n        const /** @type {?} */ filter = ChangeFilter.of(changes);\r\n        filter.has('content').subscribe(v => this.setContent(v));\r\n        filter.has('isOpen').subscribe(v => this.toggleOpen());\r\n        filter.notEmpty('position').subscribe(v => this.setPosition(v));\r\n        filter.notEmpty('size').subscribe(v => this.setSize(v));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._subscriptions.unsubscribe();\r\n        this.infoWindows.destroy(this._infoWindow);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    bindEvents() {\r\n        this._subscriptions = this.infoWindows.bindEvent(this._infoWindow, 'change').subscribe(e => this.windowChange.emit(e));\r\n        this._subscriptions.add(this.infoWindows.bindEvent(this._infoWindow, 'open').subscribe(e => {\r\n            this.windowOpen.emit(e);\r\n            if (!this.isOpen) {\r\n                this.isOpenChange.emit(true);\r\n            }\r\n        }));\r\n        this._subscriptions.add(this.infoWindows.bindEvent(this._infoWindow, 'close').subscribe(e => {\r\n            this.windowClose.emit(e);\r\n            if (this.isOpen) {\r\n                this.isOpenChange.emit(false);\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toggleOpen() {\r\n        this.logger.d(this.TAG, 'toggle open');\r\n        this.isOpen ? this.open() : this.close();\r\n    }\r\n    /**\r\n     * @param {?=} position\r\n     * @return {?}\r\n     */\r\n    open(position) {\r\n        return this._infoWindow.then(infoWindow => {\r\n            if (this.hostMarker) {\r\n                return this.hostMarker.then(marker => this.infoWindows.open(infoWindow, marker.getPosition()));\r\n            }\r\n            else if (position) {\r\n                return this.infoWindows.open(infoWindow, position);\r\n            }\r\n            else if (this.position) {\r\n                return this.infoWindows.open(infoWindow, this.position);\r\n            }\r\n            else {\r\n                return this.infoWindows.open(infoWindow);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    close() {\r\n        return this._infoWindow.then(infoWindow => infoWindow.close());\r\n    }\r\n    /**\r\n     * @param {?} content\r\n     * @return {?}\r\n     */\r\n    setContent(content) {\r\n        return this._infoWindow.then(infoWindow => infoWindow.setContent(content));\r\n    }\r\n    /**\r\n     * @param {?} position\r\n     * @return {?}\r\n     */\r\n    setPosition(position) {\r\n        return this._infoWindow.then(infoWindow => infoWindow.setPosition(position));\r\n    }\r\n    /**\r\n     * @param {?} size\r\n     * @return {?}\r\n     */\r\n    setSize(size) {\r\n        return this._infoWindow.then(infoWindow => {\r\n            const /** @type {?} */ value = this.sizes.create(size, 'size');\r\n            infoWindow.setSize(value);\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getIsOpen() {\r\n        return this._infoWindow.then(infoWindow => infoWindow.getIsOpen());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getContent() {\r\n        return this._infoWindow.then(infoWindow => infoWindow.getContent());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPosition() {\r\n        return this._infoWindow.then(infoWindow => infoWindow.getPosition());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getSize() {\r\n        return this._infoWindow.then(infoWindow => infoWindow.getSize());\r\n    }\r\n}\r\nAmapInfoWindowComponent.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'amap-info-window',\r\n                template: `\n    <div class='amap-info-window-inner'></div>\n    <div class='amap-info-window-content'>\n      <ng-content></ng-content>\n    </div>\n  `,\r\n                styles: [`\n\n  `]\r\n            },] },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nAmapInfoWindowComponent.ctorParameters = () => [\r\n    { type: ElementRef, },\r\n    { type: LoggerService, },\r\n    { type: InfoWindowService, },\r\n    { type: SizeService, },\r\n];\r\nAmapInfoWindowComponent.propDecorators = {\r\n    'isCustom': [{ type: Input },],\r\n    'autoMove': [{ type: Input },],\r\n    'closeWhenClickMap': [{ type: Input },],\r\n    'size': [{ type: Input },],\r\n    'offset': [{ type: Input },],\r\n    'position': [{ type: Input },],\r\n    'showShadow': [{ type: Input },],\r\n    'isOpen': [{ type: Input },],\r\n    'isOpenChange': [{ type: Output },],\r\n    'windowOpen': [{ type: Output },],\r\n    'windowClose': [{ type: Output },],\r\n    'windowChange': [{ type: Output },],\r\n};\n\nconst ALL_OPTIONS$1 = [\r\n    'position',\r\n    'offset',\r\n    'icon',\r\n    'content',\r\n    'topWhenClick',\r\n    'bubble',\r\n    'draggable',\r\n    'raiseOnDrag',\r\n    'cursor',\r\n    'visible',\r\n    'zIndex',\r\n    'angle',\r\n    'autoRotation',\r\n    'shadow',\r\n    'title',\r\n    'clickable',\r\n    'shape',\r\n    'extData',\r\n    'label'\r\n];\r\nclass AmapMarkerDirective {\r\n    /**\r\n     * @param {?} logger\r\n     * @param {?} markers\r\n     * @param {?} pixel\r\n     * @param {?} icons\r\n     * @param {?} labels\r\n     */\r\n    constructor(logger, markers, pixel, icons, labels) {\r\n        this.logger = logger;\r\n        this.markers = markers;\r\n        this.pixel = pixel;\r\n        this.icons = icons;\r\n        this.labels = labels;\r\n        this.TAG = 'amap-marker';\r\n        this.hidden = false;\r\n        this.openInfoWindow = true;\r\n        // amap-marker events:\r\n        this.ready = new EventEmitter();\r\n        this.markerClick = new EventEmitter();\r\n        this.dblClick = new EventEmitter();\r\n        this.rightClick = new EventEmitter();\r\n        this.mouseMove = new EventEmitter();\r\n        this.mouseOver = new EventEmitter();\r\n        this.mouseOut = new EventEmitter();\r\n        this.mouseDown = new EventEmitter();\r\n        this.mouseUp = new EventEmitter();\r\n        this.dragStart = new EventEmitter();\r\n        this.dragging = new EventEmitter();\r\n        this.dragEnd = new EventEmitter();\r\n        this.touchStart = new EventEmitter();\r\n        this.touchMove = new EventEmitter();\r\n        this.touchEnd = new EventEmitter();\r\n        this.moving = new EventEmitter();\r\n        this.moveend = new EventEmitter();\r\n        this.movealong = new EventEmitter();\r\n        // amap-info-window:\r\n        this.infoWindowComponent = new QueryList();\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        const /** @type {?} */ filter = ChangeFilter.of(changes);\r\n        if (!this._marker) {\r\n            const /** @type {?} */ options = Utils.getOptionsFor(this, ALL_OPTIONS$1);\r\n            this._marker = this.markers.create(options);\r\n            this.bindEvents();\r\n            this._marker.then(marker => this.ready.emit(marker));\r\n        }\r\n        else {\r\n            filter.has('icon').subscribe(v => this.setIcon(v));\r\n            filter.has('shadow').subscribe(v => this.setShadow(v));\r\n            filter.has('label').subscribe(v => this.setLabel(v));\r\n            filter.has('title').subscribe(v => this.setTitle(v));\r\n            filter.has('content').subscribe(v => this.setContent(v));\r\n            filter.has('extData').subscribe(v => this.setExtData(v));\r\n            filter.has('clickable').subscribe(v => this.setClickable(!!v));\r\n            filter.has('draggable').subscribe(v => this.setDraggable(!!v));\r\n            filter.has('visible').subscribe(v => v ? this.show() : this.hide());\r\n            filter.has('cursor').subscribe(v => this.setCursor(v));\r\n            filter.has('animation').subscribe(v => this.setAnimation(v));\r\n            filter.has('angle').subscribe(v => this.setAngle(v));\r\n            filter.has('zIndex').subscribe(v => this.setzIndex(v));\r\n            filter.has('shape').subscribe(v => this.setShape(v));\r\n            filter.notEmpty('offset').subscribe(v => this.setOffset(v));\r\n            filter.notEmpty('position').subscribe(v => this.setPosition(v));\r\n        }\r\n        filter.has('isTop').subscribe(v => this.setTop(!!v));\r\n        filter.has('hidden').subscribe(v => v ? this.hide() : this.show());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._subscriptions.unsubscribe();\r\n        this.markers.destroy(this._marker);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() {\r\n        this.updateInfoWindow();\r\n        this.infoWindowComponent.changes.subscribe(() => this.updateInfoWindow());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    updateInfoWindow() {\r\n        if (this.infoWindowComponent.length > 1) {\r\n            this.logger.e(this.TAG, 'Expected no more than 1 info window.');\r\n            return;\r\n        }\r\n        this.infoWindowComponent.forEach(component => {\r\n            component.hostMarker = this._marker;\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    bindEvents() {\r\n        this._subscriptions = this.bindMarkerEvent('click').subscribe(e => {\r\n            if (this.openInfoWindow) {\r\n                this.infoWindowComponent.forEach(component => {\r\n                    component.open();\r\n                });\r\n            }\r\n            this.markerClick.emit(e);\r\n        });\r\n        this._subscriptions.add(this.bindMarkerEvent('dblclick').subscribe(e => this.dblClick.emit(e)));\r\n        this._subscriptions.add(this.bindMarkerEvent('rightclick').subscribe(e => this.rightClick.emit(e)));\r\n        this._subscriptions.add(this.bindMarkerEvent('mousemove').subscribe(e => this.mouseMove.emit(e)));\r\n        this._subscriptions.add(this.bindMarkerEvent('mouseover').subscribe(e => this.mouseOver.emit(e)));\r\n        this._subscriptions.add(this.bindMarkerEvent('mouseout').subscribe(e => this.mouseOut.emit(e)));\r\n        this._subscriptions.add(this.bindMarkerEvent('mousedown').subscribe(e => this.mouseDown.emit(e)));\r\n        this._subscriptions.add(this.bindMarkerEvent('mouseup').subscribe(e => this.mouseUp.emit(e)));\r\n        this._subscriptions.add(this.bindMarkerEvent('dragstart').subscribe(e => this.dragStart.emit(e)));\r\n        this._subscriptions.add(this.bindMarkerEvent('dragging').subscribe(e => this.dragging.emit(e)));\r\n        this._subscriptions.add(this.bindMarkerEvent('dragend').subscribe(e => this.dragEnd.emit(e)));\r\n        this._subscriptions.add(this.bindMarkerEvent('touchstart').subscribe(e => this.touchStart.emit(e)));\r\n        this._subscriptions.add(this.bindMarkerEvent('touchmove').subscribe(e => this.touchMove.emit(e)));\r\n        this._subscriptions.add(this.bindMarkerEvent('touchend').subscribe(e => this.touchEnd.emit(e)));\r\n        this._subscriptions.add(this.bindMarkerEvent('moving').subscribe(e => this.moving.emit(e)));\r\n        this._subscriptions.add(this.bindMarkerEvent('moveend').subscribe(e => this.moveend.emit(e)));\r\n        this._subscriptions.add(this.bindMarkerEvent('movealong').subscribe(e => this.movealong.emit(e)));\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    bindMarkerEvent(event) {\r\n        return this.markers.bindEvent(this._marker, event);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    show() {\r\n        return this._marker.then(m => m.show());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hide() {\r\n        return this._marker.then(m => m.hide());\r\n    }\r\n    /**\r\n     * @param {?} position\r\n     * @param {?} speed\r\n     * @param {?=} f\r\n     * @return {?}\r\n     */\r\n    moveTo(position, speed, f) {\r\n        return this._marker.then(marker => marker.moveTo(position, speed, f));\r\n    }\r\n    /**\r\n     * @param {?} path\r\n     * @param {?} speed\r\n     * @param {?=} f\r\n     * @return {?}\r\n     */\r\n    moveAlong(path, speed, f) {\r\n        return this._marker.then(marker => marker.moveAlong(path, speed, f));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    stopMove() {\r\n        return this._marker.then(marker => marker.stopMove());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    pauseMove() {\r\n        return this._marker.then(marker => marker.pauseMove());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    resumeMove() {\r\n        return this._marker.then(marker => marker.resumeMove());\r\n    }\r\n    /**\r\n     * @param {?} offset\r\n     * @return {?}\r\n     */\r\n    setOffset(offset) {\r\n        return this._marker.then(marker => {\r\n            const /** @type {?} */ value = this.pixel.create(offset, 'offset');\r\n            if (value) {\r\n                marker.setOffset(value);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} icon\r\n     * @return {?}\r\n     */\r\n    setIcon(icon) {\r\n        return this._marker.then(marker => {\r\n            const /** @type {?} */ value = this.icons.create(icon, 'icon');\r\n            marker.setIcon(value);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} shadow\r\n     * @return {?}\r\n     */\r\n    setShadow(shadow) {\r\n        return this._marker.then(marker => {\r\n            const /** @type {?} */ value = (this.icons.create(shadow, 'shadow'));\r\n            marker.setShadow(value);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} label\r\n     * @return {?}\r\n     */\r\n    setLabel(label) {\r\n        return this._marker.then(marker => {\r\n            const /** @type {?} */ value = this.labels.create(label, 'label');\r\n            marker.setLabel(value);\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} draggable\r\n     * @return {?}\r\n     */\r\n    setDraggable(draggable) {\r\n        return this._marker.then(marker => marker.setDraggable(draggable));\r\n    }\r\n    /**\r\n     * @param {?} clickable\r\n     * @return {?}\r\n     */\r\n    setClickable(clickable) {\r\n        return this._marker.then(marker => marker.setClickable(clickable));\r\n    }\r\n    /**\r\n     * @param {?} position\r\n     * @return {?}\r\n     */\r\n    setPosition(position) {\r\n        return this._marker.then(marker => marker.setPosition(position));\r\n    }\r\n    /**\r\n     * @param {?} angle\r\n     * @return {?}\r\n     */\r\n    setAngle(angle) {\r\n        return this._marker.then(marker => marker.setAngle(angle));\r\n    }\r\n    /**\r\n     * @param {?} zIndex\r\n     * @return {?}\r\n     */\r\n    setzIndex(zIndex) {\r\n        return this._marker.then(marker => marker.setzIndex(zIndex));\r\n    }\r\n    /**\r\n     * @param {?} content\r\n     * @return {?}\r\n     */\r\n    setContent(content) {\r\n        return this._marker.then(marker => marker.setContent(content));\r\n    }\r\n    /**\r\n     * @param {?} title\r\n     * @return {?}\r\n     */\r\n    setTitle(title) {\r\n        return this._marker.then(marker => marker.setTitle(title));\r\n    }\r\n    /**\r\n     * @param {?} cursor\r\n     * @return {?}\r\n     */\r\n    setCursor(cursor) {\r\n        return this._marker.then(marker => marker.setCursor(cursor));\r\n    }\r\n    /**\r\n     * @param {?} isTop\r\n     * @return {?}\r\n     */\r\n    setTop(isTop) {\r\n        return this._marker.then(marker => marker.setTop(isTop));\r\n    }\r\n    /**\r\n     * @param {?} data\r\n     * @return {?}\r\n     */\r\n    setExtData(data) {\r\n        return this._marker.then(marker => marker.setExtData(data));\r\n    }\r\n    /**\r\n     * @param {?} shape\r\n     * @return {?}\r\n     */\r\n    setShape(shape) {\r\n        return this._marker.then(marker => marker.setShape(shape));\r\n    }\r\n    /**\r\n     * @param {?} animation\r\n     * @return {?}\r\n     */\r\n    setAnimation(animation) {\r\n        return this._marker.then(marker => marker.setAnimation(animation));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getOffset() {\r\n        return this._marker.then(marker => marker.getOffset());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPosition() {\r\n        return this._marker.then(marker => marker.getPosition());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getLabel() {\r\n        return this._marker.then(marker => marker.getLabel());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getAngle() {\r\n        return this._marker.then(marker => marker.getAngle());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getzIndex() {\r\n        return this._marker.then(marker => marker.getzIndex());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getIcon() {\r\n        return this._marker.then(marker => marker.getIcon());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getContent() {\r\n        return this._marker.then(marker => marker.getContent());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getTitle() {\r\n        return this._marker.then(marker => marker.getTitle());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getTop() {\r\n        return this._marker.then(marker => marker.getTop());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getShadow() {\r\n        return this._marker.then(marker => marker.getShadow());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getShape() {\r\n        return this._marker.then(marker => marker.getShape());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getExtData() {\r\n        return this._marker.then(marker => marker.getExtData());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getMap() {\r\n        return this._marker.then(marker => marker.getMap());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getAnimation() {\r\n        return this._marker.then(marker => marker.getAnimation());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getClickable() {\r\n        return this._marker.then(marker => marker.getClickable());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getDraggable() {\r\n        return this._marker.then(marker => marker.getDraggable());\r\n    }\r\n}\r\nAmapMarkerDirective.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'amap-marker'\r\n            },] },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nAmapMarkerDirective.ctorParameters = () => [\r\n    { type: LoggerService, },\r\n    { type: MarkerService, },\r\n    { type: PixelService, },\r\n    { type: IconService, },\r\n    { type: LabelService, },\r\n];\r\nAmapMarkerDirective.propDecorators = {\r\n    'position': [{ type: Input },],\r\n    'offset': [{ type: Input },],\r\n    'icon': [{ type: Input },],\r\n    'content': [{ type: Input },],\r\n    'topWhenClick': [{ type: Input },],\r\n    'bubble': [{ type: Input },],\r\n    'draggable': [{ type: Input },],\r\n    'raiseOnDrag': [{ type: Input },],\r\n    'cursor': [{ type: Input },],\r\n    'visible': [{ type: Input },],\r\n    'zIndex': [{ type: Input },],\r\n    'angle': [{ type: Input },],\r\n    'autoRotation': [{ type: Input },],\r\n    'shadow': [{ type: Input },],\r\n    'title': [{ type: Input },],\r\n    'clickable': [{ type: Input },],\r\n    'shape': [{ type: Input },],\r\n    'extData': [{ type: Input },],\r\n    'label': [{ type: Input },],\r\n    'isTop': [{ type: Input },],\r\n    'animation': [{ type: Input },],\r\n    'hidden': [{ type: Input },],\r\n    'openInfoWindow': [{ type: Input },],\r\n    'ready': [{ type: Output },],\r\n    'markerClick': [{ type: Output },],\r\n    'dblClick': [{ type: Output },],\r\n    'rightClick': [{ type: Output },],\r\n    'mouseMove': [{ type: Output },],\r\n    'mouseOver': [{ type: Output },],\r\n    'mouseOut': [{ type: Output },],\r\n    'mouseDown': [{ type: Output },],\r\n    'mouseUp': [{ type: Output },],\r\n    'dragStart': [{ type: Output },],\r\n    'dragging': [{ type: Output },],\r\n    'dragEnd': [{ type: Output },],\r\n    'touchStart': [{ type: Output },],\r\n    'touchMove': [{ type: Output },],\r\n    'touchEnd': [{ type: Output },],\r\n    'moving': [{ type: Output },],\r\n    'moveend': [{ type: Output },],\r\n    'movealong': [{ type: Output },],\r\n    'infoWindowComponent': [{ type: ContentChildren, args: [AmapInfoWindowComponent,] },],\r\n};\n\nconst ALL_OPTIONS$3 = [\r\n    'zIndex',\r\n    'bubble',\r\n    'geodesic',\r\n    'isOutline',\r\n    'borderWeight',\r\n    'outlineColor',\r\n    'path',\r\n    'strokeColor',\r\n    'strokeOpacity',\r\n    'strokeWeight',\r\n    'strokeStyle',\r\n    'strokeDasharray',\r\n    'lineJoin',\r\n    'extData',\r\n    'showDir'\r\n];\r\nclass AmapPolylineDirective {\r\n    /**\r\n     * @param {?} logger\r\n     * @param {?} polylines\r\n     */\r\n    constructor(logger, polylines) {\r\n        this.logger = logger;\r\n        this.polylines = polylines;\r\n        this.TAG = 'amap-polyline';\r\n        // Extra property:\r\n        this.hidden = false;\r\n        // amap-polyline events:\r\n        this.polylineClick = new EventEmitter();\r\n        this.ready = new EventEmitter();\r\n        this.dblClick = new EventEmitter();\r\n        this.rightClick = new EventEmitter();\r\n        this.polylineHide = new EventEmitter();\r\n        this.polylineShow = new EventEmitter();\r\n        this.mouseDown = new EventEmitter();\r\n        this.mouseUp = new EventEmitter();\r\n        this.mouseOver = new EventEmitter();\r\n        this.mouseOut = new EventEmitter();\r\n        this.change = new EventEmitter();\r\n        this.touchStart = new EventEmitter();\r\n        this.touchMove = new EventEmitter();\r\n        this.touchEnd = new EventEmitter();\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        const /** @type {?} */ filter = ChangeFilter.of(changes);\r\n        if (!this._polyline) {\r\n            const /** @type {?} */ options = this.options || Utils.getOptionsFor(this, ALL_OPTIONS$3);\r\n            this._polyline = this.polylines.create(options);\r\n            this.bindEvents();\r\n            this._polyline.then(p => this.ready.emit(p));\r\n        }\r\n        else {\r\n            filter.has('path').subscribe(v => this.setPath(v));\r\n            filter.has('options').subscribe(v => this.setOptions(v || {}));\r\n            filter.has('extData').subscribe(v => this.setExtData(v));\r\n        }\r\n        filter.has('hidden').subscribe(v => v ? this.hide() : this.show());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._subscriptions.unsubscribe();\r\n        this.polylines.destroy(this._polyline);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    bindEvents() {\r\n        this._subscriptions = this.bindPolylineEvent('click').subscribe(e => this.polylineClick.emit(e));\r\n        this._subscriptions.add(this.bindPolylineEvent('dblclick').subscribe(e => this.dblClick.emit(e)));\r\n        this._subscriptions.add(this.bindPolylineEvent('rightclick').subscribe(e => this.rightClick.emit(e)));\r\n        this._subscriptions.add(this.bindPolylineEvent('hide').subscribe(e => this.polylineHide.emit(e)));\r\n        this._subscriptions.add(this.bindPolylineEvent('show').subscribe(e => this.polylineShow.emit(e)));\r\n        this._subscriptions.add(this.bindPolylineEvent('mousedown').subscribe(e => this.mouseDown.emit(e)));\r\n        this._subscriptions.add(this.bindPolylineEvent('mouseup').subscribe(e => this.mouseUp.emit(e)));\r\n        this._subscriptions.add(this.bindPolylineEvent('mouseover').subscribe(e => this.mouseOver.emit(e)));\r\n        this._subscriptions.add(this.bindPolylineEvent('mouseout').subscribe(e => this.mouseOut.emit(e)));\r\n        this._subscriptions.add(this.bindPolylineEvent('change').subscribe(e => this.change.emit(e)));\r\n        this._subscriptions.add(this.bindPolylineEvent('touchstart').subscribe(e => this.touchStart.emit(e)));\r\n        this._subscriptions.add(this.bindPolylineEvent('touchmove').subscribe(e => this.touchMove.emit(e)));\r\n        this._subscriptions.add(this.bindPolylineEvent('touchend').subscribe(e => this.touchEnd.emit(e)));\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    bindPolylineEvent(event) {\r\n        return this.polylines.bindEvent(this._polyline, event);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    show() {\r\n        return this._polyline.then(p => p.show());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hide() {\r\n        return this._polyline.then(p => p.hide());\r\n    }\r\n    /**\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    setPath(path) {\r\n        return this._polyline.then(p => p.setPath(path));\r\n    }\r\n    /**\r\n     * @param {?} opt\r\n     * @return {?}\r\n     */\r\n    setOptions(opt) {\r\n        return this._polyline.then(p => p.setOptions(opt));\r\n    }\r\n    /**\r\n     * @param {?} ext\r\n     * @return {?}\r\n     */\r\n    setExtData(ext) {\r\n        return this._polyline.then(p => p.setExtData(ext));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getPath() {\r\n        return this._polyline.then(p => p.getPath());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getOptions() {\r\n        return this._polyline.then(p => p.getOptions());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getLength() {\r\n        return this._polyline.then(p => p.getLength());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getBounds() {\r\n        return this._polyline.then(p => p.getBounds());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getExtData() {\r\n        return this._polyline.then(p => p.getExtData());\r\n    }\r\n}\r\nAmapPolylineDirective.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'amap-polyline'\r\n            },] },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nAmapPolylineDirective.ctorParameters = () => [\r\n    { type: LoggerService, },\r\n    { type: PolylineService, },\r\n];\r\nAmapPolylineDirective.propDecorators = {\r\n    'zIndex': [{ type: Input },],\r\n    'bubble': [{ type: Input },],\r\n    'geodesic': [{ type: Input },],\r\n    'isOutline': [{ type: Input },],\r\n    'borderWeight': [{ type: Input },],\r\n    'outlineColor': [{ type: Input },],\r\n    'path': [{ type: Input },],\r\n    'strokeColor': [{ type: Input },],\r\n    'strokeOpacity': [{ type: Input },],\r\n    'strokeWeight': [{ type: Input },],\r\n    'strokeStyle': [{ type: Input },],\r\n    'strokeDasharray': [{ type: Input },],\r\n    'lineJoin': [{ type: Input },],\r\n    'extData': [{ type: Input },],\r\n    'showDir': [{ type: Input },],\r\n    'options': [{ type: Input },],\r\n    'hidden': [{ type: Input },],\r\n    'polylineClick': [{ type: Output },],\r\n    'ready': [{ type: Output },],\r\n    'dblClick': [{ type: Output },],\r\n    'rightClick': [{ type: Output },],\r\n    'polylineHide': [{ type: Output },],\r\n    'polylineShow': [{ type: Output },],\r\n    'mouseDown': [{ type: Output },],\r\n    'mouseUp': [{ type: Output },],\r\n    'mouseOver': [{ type: Output },],\r\n    'mouseOut': [{ type: Output },],\r\n    'change': [{ type: Output },],\r\n    'touchStart': [{ type: Output },],\r\n    'touchMove': [{ type: Output },],\r\n    'touchEnd': [{ type: Output },],\r\n};\n\nconst ALL_OPTIONS$4 = [\r\n    'offset',\r\n    'position',\r\n    'ruler',\r\n    'noIpLocate',\r\n    'locate',\r\n    'liteStyle',\r\n    'direction',\r\n    'autoPosition',\r\n    'locationMarker',\r\n    'useNative'\r\n];\r\nclass AmapToolBarDirective {\r\n    /**\r\n     * @param {?} logger\r\n     * @param {?} toolbars\r\n     * @param {?} pixel\r\n     */\r\n    constructor(logger, toolbars, pixel) {\r\n        this.logger = logger;\r\n        this.toolbars = toolbars;\r\n        this.pixel = pixel;\r\n        this.TAG = 'amap-tool-bar';\r\n        // Extra property:\r\n        this.hidden = false;\r\n        // amap-tool-bar events:\r\n        this.zoomchanged = new EventEmitter();\r\n        this.location = new EventEmitter();\r\n        this.ready = new EventEmitter();\r\n        this.toolbarHide = new EventEmitter();\r\n        this.toolbarShow = new EventEmitter();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        const /** @type {?} */ options = Utils.getOptionsFor(this, ALL_OPTIONS$4);\r\n        this._toolbar = this.toolbars.create(options);\r\n        this.bindEvents();\r\n        this._toolbar.then(t => this.ready.emit(t));\r\n        this.hidden ? this.hide() : this.show();\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if (!this._toolbar) {\r\n            return;\r\n        }\r\n        const /** @type {?} */ filter = ChangeFilter.of(changes);\r\n        filter.has('ruler').subscribe(v => v ? this.showRuler() : this.hideRuler());\r\n        filter.has('direction').subscribe(v => v ? this.showDirection() : this.hideDirection());\r\n        filter.has('locate').subscribe(v => v ? this.showLocation() : this.hideLocation());\r\n        filter.notEmpty('offset').subscribe(v => this.setOffset(v));\r\n        filter.has('hidden').subscribe(v => v ? this.hide() : this.show());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._subscriptions.unsubscribe();\r\n        this.toolbars.destroy(this._toolbar);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    bindEvents() {\r\n        this._subscriptions = this.bindToolBarEvent('zoomchanged').subscribe(e => this.zoomchanged.emit(e));\r\n        this._subscriptions.add(this.bindToolBarEvent('location').subscribe(e => this.location.emit(e)));\r\n        this._subscriptions.add(this.bindToolBarEvent('show').subscribe(e => this.toolbarShow.emit(e)));\r\n        this._subscriptions.add(this.bindToolBarEvent('hide').subscribe(e => this.toolbarHide.emit(e)));\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    bindToolBarEvent(event) {\r\n        return this.toolbars.bindEvent(this._toolbar, event);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    show() {\r\n        return this._toolbar.then(t => t.show());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hide() {\r\n        return this._toolbar.then(t => t.hide());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    showRuler() {\r\n        return this._toolbar.then(t => t.showRuler());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hideRuler() {\r\n        return this._toolbar.then(t => t.hideRuler());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    showDirection() {\r\n        return this._toolbar.then(t => t.showDirection());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hideDirection() {\r\n        return this._toolbar.then(t => t.hideDirection());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    showLocation() {\r\n        return this._toolbar.then(t => t.showLocation());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    hideLocation() {\r\n        return this._toolbar.then(t => t.hideLocation());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    doLocation() {\r\n        return this._toolbar.then(t => t.doLocation());\r\n    }\r\n    /**\r\n     * @param {?} offset\r\n     * @return {?}\r\n     */\r\n    setOffset(offset) {\r\n        return this._toolbar.then(t => {\r\n            const /** @type {?} */ value = this.pixel.create(offset, 'offset');\r\n            if (value) {\r\n                t.setOffset(value);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getOffset() {\r\n        return this._toolbar.then(t => t.getOffset());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getLocation() {\r\n        return this._toolbar.then(t => t.getLocation());\r\n    }\r\n}\r\nAmapToolBarDirective.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'amap-tool-bar'\r\n            },] },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nAmapToolBarDirective.ctorParameters = () => [\r\n    { type: LoggerService, },\r\n    { type: ToolBarService, },\r\n    { type: PixelService, },\r\n];\r\nAmapToolBarDirective.propDecorators = {\r\n    'offset': [{ type: Input },],\r\n    'position': [{ type: Input },],\r\n    'ruler': [{ type: Input },],\r\n    'noIpLocate': [{ type: Input },],\r\n    'locate': [{ type: Input },],\r\n    'liteStyle': [{ type: Input },],\r\n    'direction': [{ type: Input },],\r\n    'autoPosition': [{ type: Input },],\r\n    'locationMarker': [{ type: Input },],\r\n    'useNative': [{ type: Input },],\r\n    'hidden': [{ type: Input },],\r\n    'zoomchanged': [{ type: Output },],\r\n    'location': [{ type: Output },],\r\n    'ready': [{ type: Output },],\r\n    'toolbarHide': [{ type: Output },],\r\n    'toolbarShow': [{ type: Output },],\r\n};\n\nclass NgxAmapModule {\r\n    /**\r\n     * @param {?=} mapAPILoaderConfig\r\n     * @return {?}\r\n     */\r\n    static forRoot(mapAPILoaderConfig) {\r\n        return {\r\n            ngModule: NgxAmapModule,\r\n            providers: [\r\n                WindowRef,\r\n                DocumentRef,\r\n                MapAPILoaderService,\r\n                { provide: MAP_API_CONFIG, useValue: mapAPILoaderConfig },\r\n                { provide: LoggerService, useClass: mapAPILoaderConfig.debug ? DebugLoggerService : LoggerService },\r\n                PixelService,\r\n                SizeService,\r\n                IconService,\r\n                LabelService\r\n            ]\r\n        };\r\n    }\r\n}\r\nNgxAmapModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                declarations: [\r\n                    NgxAmapComponent,\r\n                    AmapMarkerDirective,\r\n                    AmapInfoWindowComponent,\r\n                    AmapPolylineDirective,\r\n                    AmapToolBarDirective\r\n                ],\r\n                exports: [\r\n                    NgxAmapComponent,\r\n                    AmapMarkerDirective,\r\n                    AmapInfoWindowComponent,\r\n                    AmapPolylineDirective,\r\n                    AmapToolBarDirective\r\n                ]\r\n            },] },\r\n];\r\n/**\r\n * @nocollapse\r\n */\r\nNgxAmapModule.ctorParameters = () => [];\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxAmapModule, NgxAmapComponent, AmapMarkerDirective, AmapInfoWindowComponent, AmapPolylineDirective, AmapToolBarDirective, IconService as ɵj, InfoWindowService as ɵm, LabelService as ɵl, LoggerService as ɵg, DebugLoggerService as ɵq, LoggerService as ɵp, MAP_API_CONFIG as ɵc, MapAPILoaderService as ɵd, MapAPIService as ɵa, MarkerService as ɵh, PixelService as ɵi, PolylineService as ɵn, SizeService as ɵk, ToolBarService as ɵo, DocumentRef as ɵf, WindowRef as ɵe, EventBinder as ɵb };\n//# sourceMappingURL=ngx-amap.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/rainnyxzy/Documents/GitHub/ngx-amap/dist/ngx-amap/ngx-amap.js\n// module id = ../../../../../dist/ngx-amap/ngx-amap.js\n// module chunks = common","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TabsModule } from 'ngx-bootstrap/tabs';\nimport { MarkdownModule } from 'ngx-markdown';\nimport { NgxAmapModule } from 'ngx-amap';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    NgxAmapModule.forRoot({\n      apiKey: '146f101e824accd6956eeec4937c1a05',\n      urlPath: 'https://webapi.amap.com/maps',\n      debug: false\n    }),\n    TabsModule.forRoot(),\n    MarkdownModule.forRoot()\n  ],\n  exports: [\n    NgxAmapModule,\n    TabsModule,\n    MarkdownModule\n  ],\n  declarations: []\n})\nexport class SharedModule { }\n\n\n\n// WEBPACK FOOTER //\n// C:/Users/rainnyxzy/Documents/GitHub/ngx-amap/src/app/views/shared/shared.module.ts","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_empty PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\nObservable.empty = staticEmpty;\n//# sourceMappingURL=empty.js.map \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/rainnyxzy/Documents/GitHub/ngx-amap/node_modules/rxjs/_esm5/add/observable/empty.js\n// module id = ../../../../rxjs/_esm5/add/observable/empty.js\n// module chunks = common","/** PURE_IMPORTS_START .._.._Observable,.._.._observable_of PURE_IMPORTS_END */\nimport { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\nObservable.of = staticOf;\n//# sourceMappingURL=of.js.map \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/rainnyxzy/Documents/GitHub/ngx-amap/node_modules/rxjs/_esm5/add/observable/of.js\n// module id = ../../../../rxjs/_esm5/add/observable/of.js\n// module chunks = common","/** PURE_IMPORTS_START ._EmptyObservable PURE_IMPORTS_END */\nimport { EmptyObservable } from './EmptyObservable';\nexport var empty = EmptyObservable.create;\n//# sourceMappingURL=empty.js.map \n\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Users/rainnyxzy/Documents/GitHub/ngx-amap/node_modules/rxjs/_esm5/observable/empty.js\n// module id = ../../../../rxjs/_esm5/observable/empty.js\n// module chunks = common"],"sourceRoot":"webpack:///"}